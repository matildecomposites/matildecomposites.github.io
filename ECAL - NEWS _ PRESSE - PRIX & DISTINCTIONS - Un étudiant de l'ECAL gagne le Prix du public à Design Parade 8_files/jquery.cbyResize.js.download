var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

/*	jQuery plugins
	Copyright (c) 2013 StÃ©phane Carion, ComputedBy (www.computedby.com)

	Dual licensed under the MIT or GPL Version 2 licenses.
	http://www.opensource.org/licenses/mit-license.php
	http://www.opensource.org/licenses/gpl-2.0.php
	
	Based on works:
		Tiny Scrollbar 1.65, Maarten Baijs, http://www.baijs.nl/tinyscrollbar/
		jquery.innerfade.js, Torsten Baldes, http://medienfreunde.com/lab/innerfade/
		mousewheel.js, Brandon Aaron (http://brandonaaron.net), http://brandonaaron.net/javascripts/plugins/mousewheel.js
*/

/* cbyResize plugin (call functions when window resize/zoom, fix elements with "position:fixed" when zooming with touch devices) */
(function($){
	/* OO jquery based on http://www.virgentech.com/blog/2009/10/building-object-oriented-jquery-plugin.html */
	$.fn.cbyResize = function(options) {
		return this.each(function() {
			var element = $(this);
			// Return early if this element already has a plugin instance
			if (element.data('cbyResize')) return;
			// pass options to plugin constructor
			var cbyResize = new cbyResizeClass(this, options);
			// Store plugin object in this element's data
			element.data('cbyResize', cbyResize);
		});
	};
	
	var cbyResizeClass = function(element,options) {
		// Start declaration (don't forget to put 'var' before every variables/functions!)
		// Default settings
		var settings = jQuery.extend({
			interval: 100,						// check every #interval# milliseconds
			fixedToAbsolute: true,				// Change elements with position:fixed to position:absolute when zooming in the window (touch devices)
			resize: function(){},				// function call when window resizes
			resizeInit: true,					// call the function resize() at beginning
			zoom: function(zoom){}				// function call when window is zoomed
		}, options);
		var container=$(element);				// The object
		var sizes={string1:'',string2:'',array1:false,array2:false};
		
		var fixedElements=$('body > div').filter(function() {return $(this).css("position") === 'fixed';});
		
		var getSize = function() {
			// return a string with window size/zoom information (why string: easy to compare)
			return $(window).width() + '/' + $(window).height() + '/' + (document.documentElement.clientWidth / window.innerWidth) + '/0/0/0';
		}
		
		var check = function() {
			sizes.string2 = $(window).width() + '/' + $(window).height() + '/' + (document.documentElement.clientWidth / window.innerWidth) + '/0/0/0';
			if (sizes.string2!=sizes.string1) {
				sizes.array1=sizes.string1.split("/");
				sizes.array2=sizes.string2.split("/");
				if (sizes.array1[0]!=sizes.array2[0] || sizes.array1[1]!=sizes.array2[1]) {
					// The width or height has changed...
					if (typeof settings.resize == 'function') { settings.resize.call(this); }
				}
				if (sizes.array1[2]!=sizes.array2[2]) {
					// The zoom has changed...
					sizes.array2[2]=1*sizes.array2[2];		// string to float
					if (settings.fixedToAbsolute) 
						if (sizes.array2[2]>1) 		// Zoom > 1 -> set all fixedElements to "position:absolute"
							fixedElements.css({position:'absolute'}); 
						else 						// Zoom = 1 -> reset all fixedElements to "position:fixed"
							fixedElements.css({position:'fixed'});
					if (typeof settings.zoom == 'function') { settings.zoom.call(sizes.array2); }
				}
				sizes.string1=sizes.string2;
			}
		}
		sizes.string1=getSize();
		if (settings.resizeInit && typeof settings.resize == 'function') { settings.resize.call(this); }
		check();
		setInterval(function(){check()},settings.interval);
		
		this.resize = function(){		// Allow to call a resize from outsite, ex: $('body').data('cbyResize').resize()
			if (typeof settings.resize == 'function') { settings.resize.call(this); }
		}
	}
})(jQuery);

}
/*
     FILE ARCHIVED ON 13:27:19 Sep 02, 2013 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 11:18:45 Nov 02, 2021.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 158.855
  exclusion.robots: 0.099
  exclusion.robots.policy: 0.092
  RedisCDXSource: 2.689
  esindex: 0.008
  LoadShardBlock: 136.288 (3)
  PetaboxLoader3.datanode: 117.306 (4)
  CDXLines.iter: 15.268 (3)
  load_resource: 244.227
  PetaboxLoader3.resolve: 120.274
*/